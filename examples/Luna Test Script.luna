--[[
    Some test code for an example Indentation Language
]]

----------------------------------------
-- Assignment --------------------------
----------------------------------------
variable = 'A'
print hello = 100, things = 300

----------------------------------------
-- Binary Expression -------------------
----------------------------------------
print "'A' .. 'B' = ", 'A'..'B'
print "variable .. 'B' = ", variable..'B'

----------------------------------------
-- Bracketed Expression ----------------
----------------------------------------
v = 3 * (1 + 2)

-- TODO: Try and fix this
--v = (1 + 2) * 3

----------------------------------------
-- Bracketed Indexing ------------------
----------------------------------------
Table = {}
Table['Value'] = 'Bracket Index'
print Table['Value']

----------------------------------------
-- Calling -----------------------------
----------------------------------------
NoTable = {item: '1: Hello'}
Table = {item: '2: Hello'}
Table.Table = {item: '3: Hello'}
Table.Table.Table = {item: '4: Hello'}

Func = (p2,p3)=>
    print self.item, p2, @item, p3
Table.Func = Func
Table.Table.Func = Func
Table.Table.Table.Func = Func

Func NoTable, 'World', 'A'
Table.Func 'World', 'B'
Table.Table.Func 'World', 'C'
Table.Table.Table.Func 'World', 'D'

FuncInFunc = (table)->
    table.Func 'Func In Func', table

FuncInFunc Table
FuncInFunc Table.Table
FuncInFunc Table.Table.Table

-- Static Call
Table::Func {item: 'StaticItem'}, 'Static', 'Static2'

----------------------------------------
-- Functions ---------------------------
----------------------------------------
f1 = ->
    return 'F1'

print 'Call F1: ' .. f1!

f2 = (arg)->
    return arg .. ' Arguments!'

f3 = (arg)=>
    return arg .. ' Arguments!'

print f2 'Hello'

----------------------------------------
-- If ----------------------------------
----------------------------------------
if abc = 100
    print 'If!'

if true
    print 'True'

if false
    print 'False'

----------------------------------------
-- Index -------------------------------
----------------------------------------
A = {}
A.B = {}
A.B.C = {}
A.B.C.D = 'Indexing'
print A.B.C.D

--A['C'] = 'Hello'
--print A['C']

----------------------------------------
-- Tables ------------------------------
----------------------------------------
tbl = {'A', 'B', 'C', thing: Value}

----------------------------------------
-- While -------------------------------
----------------------------------------
value = 5
test = ->
    value = value - 1
    return value > 0

while i = test!
    print 'While! ' .. value

----------------------------------------
-- Indenation --------------------------
----------------------------------------
print 'OUTER-A'
A = ->
    print 'INNER-A'
    B = ->
        print 'INNER-INNER'
    print 'INNER-B'
    B!
print 'OUTER-B'
A!
